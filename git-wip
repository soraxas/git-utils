#!/bin/sh

#set -x

VERSION="v1.5"

WIP_TOKEN="[FIXME]: local wip DIRTY files commit (to be reverted)"
WIP_HAS_STAGED_TOKEN="[FIXME]: local wip STAGED files commit (to be reverted)"

GREEN='\033[0;32m'
RED='\033[0;31m'
MAGENTA='\033[0;35m'
NC='\033[0m'

say_action() {
  printf "$MAGENTA>> ${@}${NC}\n"
}

say() {
  printf "$GREEN>> ${@}${NC}\n"
}

failed() {
  printf "$RED>> Something went wrong. ${@}${NC}\n"
  exit 1
}

check_has_wip() {
    git update-index --refresh
    git diff-index --quiet HEAD --
}

check_staged() {
    x="$(git diff --name-only --cached)"
    if [ "$x" != "" ]; then
      say_action "There are staged files, adding WIP staged files commit"
      # non-empty means there is files to be staged.
      git commit --no-verify -m "${WIP_HAS_STAGED_TOKEN}" || failed
    fi
}

last_commit_has_wip_token() {
  x="$(git log -1 --pretty=%B)"
  [ "$x" = "${WIP_TOKEN}" ]
}

revert_wip_commit() {
  if last_commit_has_wip_token; then
    say_action "Undoing WIP commit"
    git reset --soft HEAD^ || failed
    git reset
    x="$(git log -1 --pretty=%B)"
    if [ "$x" = "${WIP_HAS_STAGED_TOKEN}" ]; then
      say_action "Undoing staged commit"
      git reset --soft HEAD^ || failed
    fi
    return 0
  fi
  return 1
}

create_wip_commit() {
  if [ "$(check_has_wip)" = "" ]; then
    # nothing to add to wip! :)
    say "No WIP work found, exiting."
    exit 0
  fi
  check_staged 
  say_action "Adding WIP commit with all files"
  git add -u || failed
  git commit --no-verify -am "${WIP_TOKEN}" || failed
}

# https://stackoverflow.com/questions/45352246/how-to-switch-and-save-without-commit-in-git
main() {
  if [ -z "$1" ]; then
    # default behaviour
    if ! revert_wip_commit; then
      create_wip_commit
    fi
  else
    [ "$1" = "CREATE" ] \
      && create_wip_commit \
      || revert_wip_commit
  fi
  say "Done"
}

for arg; do
  shift
  case "$arg" in
    --create)
      [ -n "$ACTION" ] && echo "--create and --revert are mutually exclusive" && exit 1
      ACTION="CREATE"
      ;;
    --revert)
      [ -n "$ACTION" ] && echo "--create and --revert are mutually exclusive" && exit 1
      ACTION="REVERT"
      ;;
    --help)
      cat << EOF
Create a revertible wip commit

Usage: git wip [BRANCH] [-c|--create] [-r|--revert]

Options:    
      -c, --create  enforce to create a wip commit, rather than the default
                    behaviour of intelligently create/revert without user input.
                    This flag has no effect if BRANCH is given, as it will always
                    be creating a wip commit before switching branch, and always
                    reverting a wip commit afterwards.
      -r, --revert  enforce to revert a wip commit, otherwise same as above

      --help        display this help message and exit
      --version     output version information and exit    

Quick summary:
  If there is a wip commit, it will revert it.
  Otherwise, it will put dirty state into a wip commit.
  If --create or --revert is given, it will not try to intelligently make
  this decision for the user. The two flags are mutually exclusive.

Wip stands for work-in-progress. When executed, this script will first
check if there exists a wip commit in git log. If it does, it will revert
the commit and put the repo back into previous dirty state. This is 
achieved by checking for a wip token in commit message.

It also takes special care on staged file and revert them in a staged
status accordingly.

[BRANCH]:
  If given, it will switch to BRANCH after wip action was
  executed successfully.
  In addition, it will reverts wip commit if there exists a wip commit in
  the target branch.
EOF
      exit
      ;;
    --version)
      cat << EOF
git-wip ${VERSION}

Copyright (c) 2020 Tin Lai (@soraxas)
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Tin Lai (@soraxas)
EOF
      exit
      ;;
    *)
      # set back any unused args
      set -- "$@" "$arg"
  esac
done

if [ "$#" -gt 1 ]; then
  $0 --help
  exit 1
fi

if [ -n "$1" ]; then
  # if we are switching branch, the wip action must be creating a wip commit
  main "CREATE" && git checkout "$1" -- || failed
  last_commit_has_wip_token && main "REVERT"
else
  main "$ACTION"
fi
